# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

# Ultralytics YOLO11 object detection model with P3/8 - P5/32 outputs
# Model docs: https://docs.ultralytics.com/models/yolo11
# Task docs: https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolo11n.yaml' will call yolo11.yaml with scale 'n'
  # [depth, width, max_channels]
  # Original n: [0.50, 0.25, 1024] # summary: 319 layers, 2624080 parameters, 2624064 gradients, 6.6 GFLOPs
  # Modified n: width_multiple is effectively halved again (0.25 * 0.5 = 0.125)
  n: [0.50, 0.25, 512] # Adjusted width_multiple and max_channels for halved channels
  s: [0.50, 0.50, 1024]
  m: [0.50, 1.00, 512]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.50, 512]

# Modified YOLO11n backbone with halved channels and C2fAdd
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [32, 3, 2]] # 0-P1/2, Output 64 -> 32
  - [-1, 1, Conv, [64, 3, 2]] # 1-P2/4, Output 128 -> 64
  # C3k2 -> C2fAdd, Output 256 -> 128. Input from layer 1 (64). C2fAdd(c1, c2, n=repeats, ...) -> C2fAdd(64, 128, n=2)
  - [-1, 2, C3k2, [128, False, 0.25]] # 2
  - [-1, 1, Conv, [128, 3, 2]] # 3-P3/8, Output 256 -> 128
  # C3k2 -> C2fAdd, Output 512 -> 256. Input from layer 3 (128). C2fAdd(128, 256, n=2, ...)
  - [-1, 2, C3k2, [256, False, 0.25]] # 4
  - [-1, 1, Conv, [256, 3, 2]] # 5-P4/16, Output 512 -> 256
  # C3k2 -> C2fAdd, Output 512 -> 256. Input from layer 5 (256). C2fAdd(256, 256, n=2, ...)
  - [-1, 2, C3k2, [256, True]] # 6
  - [-1, 1, Conv, [512, 3, 2]] # 7-P5/32, Output 1024 -> 512
  # C3k2 -> C2fAdd, Output 1024 -> 512. Input from layer 7 (512). C2fAdd(512, 512, n=2, ...)
  - [-1, 2, C3k2, [512, True]] # 8
  # SPPF, Output 1024 -> 512. Input from layer 8 (512). SPPF(c1, c2, k) -> SPPF(512, 512, 5)
  - [-1, 1, SPPF, [512, 5]] # 9
  # C2PSA, Output 1024 -> 512. Input from layer 9 (512). C2PSA(c1, c2) -> C2PSA(512, 512) (Assuming C2PSA takes c1, c2 and arg is c2)
  - [-1, 2, C2PSA, [512]] # 10

# Modified YOLO11n head with halved channels and C2fAdd
head:
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 11: Upsample from layer 10 (512 channels) -> 512 channels
  # Concat layer 11 (512) and layer 6 (backbone P4, 256). Concat output 512 + 256 = 768
  - [[-1, 6], 1, Concat, [1]] # 12
  # C3k2 -> C2fAdd. Input from layer 12 (768). Output 512 -> 256. C2fAdd(768, 256, n=2, ...)
  - [-1, 2, C3k2, [256, False]] # 13

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 14: Upsample from layer 13 (256 channels) -> 256 channels
  # Concat layer 14 (256) and layer 4 (backbone P3, 128). Concat output 256 + 128 = 384
  - [[-1, 4], 1, Concat, [1]] # 15
  # C3k2 -> C2fAdd. Input from layer 15 (384). Output 256 -> 128. C2fAdd(384, 128, n=2, ...)
  - [-1, 2, C3k2, [128, False]] # 16 (P3/8-small)

  # P4 branch
  # Conv. Input from layer 16 (128). Output 256 -> 128. Conv(128, 128, 3, 2)
  - [-1, 1, Conv, [128, 3, 2]] # 17
  # Concat layer 17 (128) and layer 13 (head P4, 256). Concat output 128 + 256 = 384
  - [[-1, 13], 1, Concat, [1]] # 18
  # C3k2 -> C2fAdd. Input from layer 18 (384). Output 512 -> 256. C2fAdd(384, 256, n=2, ...)
  - [-1, 2, C3k2, [256, False]] # 19 (P4/16-medium)

  # P5 branch
  # Conv. Input from layer 19 (256). Output 512 -> 256. Conv(256, 256, 3, 2)
  - [-1, 1, Conv, [256, 3, 2]] # 20
  # Concat layer 20 (256) and layer 10 (backbone P5 C2PSA, 512). Concat output 256 + 512 = 768
  - [[-1, 10], 1, Concat, [1]] # 21
  # C3k2 -> C2fAdd. Input from layer 21 (768). Output 1024 -> 512. C2fAdd(768, 512, n=2, ...)
  - [-1, 2, C3k2, [512, True]] # 22 (P5/32-large)

  # Detect layer
  # Inputs from layers 16 (128 channels), 19 (256 channels), 22 (512 channels)
  - [[16, 19, 22], 1, Detect, [nc]] # 23 Detect(P3, P4, P5)
